def ast_to_expr_construct(node: str) -> str:
    mapping = {
        "ClassInstanceCreation": "Class Instance Creation",
        "ThisExpression": "This Expression",
        "SimpleName": "Simple Variable Access",
        "FieldAccess": "Field Access",
        "SuperFieldAccess": "Super Field Access",
        "MethodInvocation": "Method Invocation",
        "SuperMethodInvocation": "Super Method Invocation",
        "ArrayAccess": "Array Access",
        "ArrayCreation": "Array Instance Creation",
        "CastExpression": "Cast Expression",
        "LambdaExpression": "Lambda",
        "CreationReference": "Constructor Reference",
        "ExpressionMethodReference": "Method Reference",
        "SuperMethodReference": "Super Method Reference",
        "Assignment": "Assignment",
        "ConditionalExpression": "Conditional Expression",
        "InstanceofExpression": "Type Comparison",
        "PostfixExpression": "Postfix Expression",
        "PrefixExpression": "Prefix Expression",
        "InfixExpression": "Infix Expression",
        "BooleanLiteral": "Boolean Literal",
        "CharacterLiteral": "Character Literal",
        "NullLiteral": "Null Literal",
        "NumberLiteral": "Number Literal",
        "StringLiteral": "String Literal",
        "TypeLiteral": "Class Literal",
    }
    return mapping[node]
